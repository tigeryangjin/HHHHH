/*
日活、净订购人数、转化率、日均业绩、客单价
渠道：整体含扫码购、APP、微信非扫码购
*/
--1.整体含扫码购
SELECT DATE_TABLE.DATE_KEY 日期,
       ALL_NEW_DAU.DAU 新_整体_日活,
       ALL_OLD_DAU.DAU 老_整体_日活,
       ALL_NEW_ORDER.ORDER_MEMBER_COUNT 新_整体_净订购人数,
       DECODE(ALL_NEW_DAU.DAU,
              0,
              0,
              ALL_NEW_ORDER.ORDER_MEMBER_COUNT / ALL_NEW_DAU.DAU) 新_整体_转化率,
       ALL_NEW_ORDER.ORDER_AMOUNT 新_整体_净订购金额,
       DECODE(ALL_NEW_ORDER.ORDER_MEMBER_COUNT,
              0,
              0,
              ALL_NEW_ORDER.ORDER_AMOUNT / ALL_NEW_ORDER.ORDER_MEMBER_COUNT) 新_整体_客单价,
       ALL_OLD_ORDER.ORDER_MEMBER_COUNT 老_整体_净订购人数,
       DECODE(ALL_OLD_DAU.DAU,
              0,
              0,
              ALL_OLD_ORDER.ORDER_MEMBER_COUNT / ALL_OLD_DAU.DAU) 老_整体_转化率,
       ALL_OLD_ORDER.ORDER_AMOUNT 老_整体_净订购金额,
       DECODE(ALL_OLD_ORDER.ORDER_MEMBER_COUNT,
              0,
              0,
              ALL_OLD_ORDER.ORDER_AMOUNT / ALL_OLD_ORDER.ORDER_MEMBER_COUNT) 老_整体_客单价
  FROM (SELECT 20180316 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180317 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180318 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180319 DATE_KEY
          FROM DUAL) DATE_TABLE,
       (SELECT A.VISIT_DATE_KEY DATE_KEY, COUNT(DISTINCT A.VID) DAU
          FROM FACT_PAGE_VIEW A
         WHERE A.VISIT_DATE_KEY BETWEEN 20180316 AND 20180319
           AND EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND A.VISIT_DATE_KEY = B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY A.VISIT_DATE_KEY) ALL_NEW_DAU,
       (SELECT A.VISIT_DATE_KEY DATE_KEY, COUNT(DISTINCT A.VID) DAU
          FROM FACT_PAGE_VIEW A
         WHERE A.VISIT_DATE_KEY BETWEEN 20180316 AND 20180319
           AND NOT EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND A.VISIT_DATE_KEY = B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY A.VISIT_DATE_KEY) ALL_OLD_DAU,
       (SELECT TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') DATE_KEY,
               COUNT(DISTINCT A.CUST_NO) ORDER_MEMBER_COUNT,
               SUM(C.GOODS_PAY_PRICE * C.GOODS_NUM) ORDER_AMOUNT
          FROM FACT_EC_ORDER_2 A, FACT_EC_ORDER_GOODS C
         WHERE A.ORDER_ID = C.ORDER_ID
           AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') BETWEEN 20180316 AND
               20180319
           AND A.ORDER_STATE >= 20
           AND EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') =
                       B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD')) ALL_NEW_ORDER,
       (SELECT TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') DATE_KEY,
               COUNT(DISTINCT A.CUST_NO) ORDER_MEMBER_COUNT,
               SUM(C.GOODS_PAY_PRICE * C.GOODS_NUM) ORDER_AMOUNT
          FROM FACT_EC_ORDER_2 A, FACT_EC_ORDER_GOODS C
         WHERE A.ORDER_ID = C.ORDER_ID
           AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') BETWEEN 20180316 AND
               20180319
           AND A.ORDER_STATE >= 20
           AND NOT EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') =
                       B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD')) ALL_OLD_ORDER
 WHERE DATE_TABLE.DATE_KEY = ALL_NEW_DAU.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_OLD_DAU.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_NEW_ORDER.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_OLD_ORDER.DATE_KEY(+);
--2.APP
SELECT DATE_TABLE.DATE_KEY 日期,
       ALL_NEW_DAU.DAU 新_APP_日活,
       ALL_OLD_DAU.DAU 老_APP_日活,
       ALL_NEW_ORDER.ORDER_MEMBER_COUNT 新_APP_净订购人数,
       DECODE(ALL_NEW_DAU.DAU,
              0,
              0,
              ALL_NEW_ORDER.ORDER_MEMBER_COUNT / ALL_NEW_DAU.DAU) 新_APP_转化率,
       ALL_NEW_ORDER.ORDER_AMOUNT 新_APP_净订购金额,
       DECODE(ALL_NEW_ORDER.ORDER_MEMBER_COUNT,
              0,
              0,
              ALL_NEW_ORDER.ORDER_AMOUNT / ALL_NEW_ORDER.ORDER_MEMBER_COUNT) 新_APP_客单价,
       ALL_OLD_ORDER.ORDER_MEMBER_COUNT 老_APP_净订购人数,
       DECODE(ALL_OLD_DAU.DAU,
              0,
              0,
              ALL_OLD_ORDER.ORDER_MEMBER_COUNT / ALL_OLD_DAU.DAU) 老_APP_转化率,
       ALL_OLD_ORDER.ORDER_AMOUNT 老_APP_净订购金额,
       DECODE(ALL_OLD_ORDER.ORDER_MEMBER_COUNT,
              0,
              0,
              ALL_OLD_ORDER.ORDER_AMOUNT / ALL_OLD_ORDER.ORDER_MEMBER_COUNT) 老_APP_客单价
  FROM (SELECT 20180316 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180317 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180318 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180319 DATE_KEY
          FROM DUAL) DATE_TABLE,
       (SELECT A.VISIT_DATE_KEY DATE_KEY, COUNT(DISTINCT A.VID) DAU
          FROM FACT_PAGE_VIEW A
         WHERE A.VISIT_DATE_KEY BETWEEN 20180316 AND 20180319
           AND A.APPLICATION_KEY IN (10, 20) --APP
           AND EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND A.VISIT_DATE_KEY = B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY A.VISIT_DATE_KEY) ALL_NEW_DAU,
       (SELECT A.VISIT_DATE_KEY DATE_KEY, COUNT(DISTINCT A.VID) DAU
          FROM FACT_PAGE_VIEW A
         WHERE A.VISIT_DATE_KEY BETWEEN 20180316 AND 20180319
           AND A.APPLICATION_KEY IN (10, 20) --APP
           AND NOT EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND A.VISIT_DATE_KEY = B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY A.VISIT_DATE_KEY) ALL_OLD_DAU,
       (SELECT TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') DATE_KEY,
               COUNT(DISTINCT A.CUST_NO) ORDER_MEMBER_COUNT,
               SUM(C.GOODS_PAY_PRICE * C.GOODS_NUM) ORDER_AMOUNT
          FROM FACT_EC_ORDER_2 A, FACT_EC_ORDER_GOODS C
         WHERE A.ORDER_ID = C.ORDER_ID
           AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') BETWEEN 20180316 AND
               20180319
           AND A.ORDER_STATE >= 20
           AND A.APP_NAME IN ('KLGAndroid', 'KLGiPhone') --APP
           AND EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') =
                       B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD')) ALL_NEW_ORDER,
       (SELECT TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') DATE_KEY,
               COUNT(DISTINCT A.CUST_NO) ORDER_MEMBER_COUNT,
               SUM(C.GOODS_PAY_PRICE * C.GOODS_NUM) ORDER_AMOUNT
          FROM FACT_EC_ORDER_2 A, FACT_EC_ORDER_GOODS C
         WHERE A.ORDER_ID = C.ORDER_ID
           AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') BETWEEN 20180316 AND
               20180319
           AND A.ORDER_STATE >= 20
           AND A.APP_NAME IN ('KLGAndroid', 'KLGiPhone') --APP
           AND NOT EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') =
                       B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD')) ALL_OLD_ORDER
 WHERE DATE_TABLE.DATE_KEY = ALL_NEW_DAU.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_OLD_DAU.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_NEW_ORDER.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_OLD_ORDER.DATE_KEY(+);

--3.微信非扫码购
SELECT DATE_TABLE.DATE_KEY 日期,
       ALL_NEW_DAU.DAU 新_微信_日活,
       ALL_OLD_DAU.DAU 老_微信_日活,
       ALL_NEW_ORDER.ORDER_MEMBER_COUNT 新_微信_净订购人数,
       DECODE(ALL_NEW_DAU.DAU,
              0,
              0,
              ALL_NEW_ORDER.ORDER_MEMBER_COUNT / ALL_NEW_DAU.DAU) 新_微信_转化率,
       ALL_NEW_ORDER.ORDER_AMOUNT 新_微信_净订购金额,
       DECODE(ALL_NEW_ORDER.ORDER_MEMBER_COUNT,
              0,
              0,
              ALL_NEW_ORDER.ORDER_AMOUNT / ALL_NEW_ORDER.ORDER_MEMBER_COUNT) 新_微信_客单价,
       ALL_OLD_ORDER.ORDER_MEMBER_COUNT 老_微信_净订购人数,
       DECODE(ALL_OLD_DAU.DAU,
              0,
              0,
              ALL_OLD_ORDER.ORDER_MEMBER_COUNT / ALL_OLD_DAU.DAU) 老_微信_转化率,
       ALL_OLD_ORDER.ORDER_AMOUNT 老_微信_净订购金额,
       DECODE(ALL_OLD_ORDER.ORDER_MEMBER_COUNT,
              0,
              0,
              ALL_OLD_ORDER.ORDER_AMOUNT / ALL_OLD_ORDER.ORDER_MEMBER_COUNT) 老_微信_客单价
  FROM (SELECT 20180316 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180317 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180318 DATE_KEY
          FROM DUAL
        UNION
        SELECT 20180319 DATE_KEY
          FROM DUAL) DATE_TABLE,
       (SELECT A.VISIT_DATE_KEY DATE_KEY, COUNT(DISTINCT A.VID) DAU
          FROM FACT_PAGE_VIEW A
         WHERE A.VISIT_DATE_KEY BETWEEN 20180316 AND 20180319
           AND A.APPLICATION_KEY IN (10, 20) --APP
           AND EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND A.VISIT_DATE_KEY = B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY A.VISIT_DATE_KEY) ALL_NEW_DAU,
       (SELECT A.VISIT_DATE_KEY DATE_KEY, COUNT(DISTINCT A.VID) DAU
          FROM FACT_PAGE_VIEW A
         WHERE A.VISIT_DATE_KEY BETWEEN 20180316 AND 20180319
           AND A.APPLICATION_KEY IN (10, 20) --APP
           AND NOT EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND A.VISIT_DATE_KEY = B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY A.VISIT_DATE_KEY) ALL_OLD_DAU,
       (SELECT TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') DATE_KEY,
               COUNT(DISTINCT A.CUST_NO) ORDER_MEMBER_COUNT,
               SUM(C.GOODS_PAY_PRICE * C.GOODS_NUM) ORDER_AMOUNT
          FROM FACT_EC_ORDER_2 A, FACT_EC_ORDER_GOODS C
         WHERE A.ORDER_ID = C.ORDER_ID
           AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') BETWEEN 20180316 AND
               20180319
           AND A.ORDER_STATE >= 20
           AND A.APP_NAME = 'KLGWX' --WX
           AND A.ORDER_FROM <> '76' --剔除扫码购
           AND EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') =
                       B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD')) ALL_NEW_ORDER,
       (SELECT TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') DATE_KEY,
               COUNT(DISTINCT A.CUST_NO) ORDER_MEMBER_COUNT,
               SUM(C.GOODS_PAY_PRICE * C.GOODS_NUM) ORDER_AMOUNT
          FROM FACT_EC_ORDER_2 A, FACT_EC_ORDER_GOODS C
         WHERE A.ORDER_ID = C.ORDER_ID
           AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') BETWEEN 20180316 AND
               20180319
           AND A.ORDER_STATE >= 20
           AND A.APP_NAME = 'KLGWX' --WX
           AND A.ORDER_FROM <> '76' --剔除扫码购
           AND NOT EXISTS
         (SELECT 1
                  FROM KPI_VID_FIRST_ORDER B
                 WHERE A.VID = B.VID
                   AND TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD') =
                       B.FIRST_ORDER_DATE_KEY
                   AND B.FIRST_ORDER_DATE_KEY BETWEEN 20180316 AND 20180319)
         GROUP BY TO_CHAR(TRUNC(A.ADD_TIME), 'YYYYMMDD')) ALL_OLD_ORDER
 WHERE DATE_TABLE.DATE_KEY = ALL_NEW_DAU.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_OLD_DAU.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_NEW_ORDER.DATE_KEY(+)
   AND DATE_TABLE.DATE_KEY = ALL_OLD_ORDER.DATE_KEY(+);
