SELECT *
  FROM ALL_SOURCE A
 WHERE UPPER(A.TEXT) LIKE '%FACT_ECMEMBER%';

SELECT * FROM DIM_MEMBER;
SELECT * FROM FACT_ECMEMBER;

SELECT * FROM FACT_PAGE_VIEW;
SELECT * FROM FACT_PAGE_VIEW_HIT;
CREATEPAVEVIEWFACT;
SELECT * FROM ALL_OBJECTS A WHERE A.OBJECT_NAME='FACT_PAGE_VIEW_HIT';

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME = 'HAPPIGO_EC_PKG.MERGE_FACT_GOODS_EVALUATE'
 ORDER BY A.START_TIME DESC;

SELECT * FROM OPER_EC_PRODUCT_SUMMARY_REPORT A WHERE A.ITEM_CODE=241242;

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME = 'YJ_REPORT.OPER_ACTIVE_MEMBER_REPORT'
 ORDER BY A.START_TIME DESC;

alter index GEVAL_GEVAL_ID REBUILD;

SELECT * FROM FACT_GOODS_EVALUATE A ORDER BY A.GEVAL_ID DESC;

TRUNCATE TABLE EC_GOODS_EVALUATE_TMP;

SELECT * FROM EC_GOODS_EVALUATE_TMP;

SELECT COUNT(1)
  FROM FACT_GOODS_EVALUATE A;

SELECT *
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY_IASPE IS NULL
   AND A.IASPE IS NOT NULL;

UPDATE FACT_GOODS_EVALUATE A
   SET A.IASPE = A.GEVAL_SENTIMENT_POLARITY_IASPE;
COMMIT;
	 
UPDATE FACT_GOODS_EVALUATE A
   SET A.GEVAL_SENTIMENT_POLARITY_IASPE = A.IASPE
 WHERE A.IASPE IS NOT NULL;
COMMIT;
	 
UPDATE FACT_GOODS_EVALUATE A
   SET A.GEVAL_SENTIMENT_POLARITY_IASPE = NULL
 WHERE A.IASPE IS NOT NULL;
COMMIT;

SELECT MAX(LENGTH(A.GEVAL_SENTIMENT_POLARITY_IASPE))
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY_IASPE IS NOT NULL;

SELECT * FROM FACT_GOODS_EVALUATE_ASPECT;

SELECT A.GEVAL_ID,
       A.GEVAL_ORDERGOODSID,
       A.GEVAL_GOODS_COMMONID,
       A.GEVAL_SENTIMENT_POLARITY_IASPE
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY <> 0
   AND A.GEVAL_SENTIMENT_POLARITY_IASPE IS NOT NULL
   AND A.GEVAL_SENTIMENT_POLARITY_IASPE LIKE '%}]'
   AND NOT EXISTS (SELECT 1
          FROM FACT_GOODS_EVALUATE_ASPECT B
         WHERE A.GEVAL_ID = B.GEVAL_ID)
 ORDER BY A.GEVAL_ID;

SELECT *
  FROM ALL_ALL_TABLES A
 WHERE A.owner = 'DW_USER'
   AND A.table_name LIKE 'KETTLE_%';

select * from kettle_transformation_log;
select * from KETTLE_STEP_LOG;
select * from KETTLE_PERFORMANCE_LOG;
select * from KETTLE_METRICS_LOG;
select * from KETTLE_LOGGING_CHANNELS_LOG;

select * from kettle_transformation_log;
select * from KETTLE_STEP_LOG;
select * from KETTLE_PERFORMANCE_LOG;
select * from KETTLE_METRICS_LOG;
select * from KETTLE_LOGGING_CHANNELS_LOG;

SELECT A.GEVAL_ID,
       A.GEVAL_ORDERGOODSID,
       A.GEVAL_GOODS_COMMONID,
       A.GEVAL_SENTIMENT_POLARITY_IASPE
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY_IASPE IS NOT NULL
   AND ROWNUM <= 10;

SELECT *
  FROM FACT_PAGE_VIEW A
 WHERE A.VISIT_DATE >= DATE '2018-07-20'
   AND A.HMCI IS NOT NULL
   AND A.HMPL IS NOT NULL;

SELECT *
  FROM ALL_SOURCE A
 WHERE UPPER(A.TEXT) LIKE '%INSERT%FACT_PAGE_VIEW%'
   AND EXISTS (SELECT 1
          FROM ALL_SOURCE B
         WHERE A.OWNER = B.OWNER
           AND A.name = B.name
           AND A.TYPE = B.TYPE
           AND UPPER(B.TEXT) LIKE '%DEVICE_KEY%');

CREATEPAVEVIEWFACT;

SELECT * FROM FACT_PAGE_VIEW A WHERE A.VISIT_DATE >= DATE '2018-07-31';
SELECT * FROM ODSHAPPIGO.ODS_PAGEVIEW A;

select * from FACT_VISITOR_REGISTER t;

SELECT * FROM W_ETL_LOG A ORDER BY A.START_TIME DESC;

processgoodunion;
processgoodlabel;
processgood;

SELECT A.GEVAL_SENTIMENT_POLARITY_IASPE
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY_IASPE IS NOT NULL
   AND ROWNUM <= 10;

SELECT * FROM FACT_GOODS_EVALUATE_ASPECT;

SELECT DISTINCT A.VISIT_DATE_KEY, A.MEMBER_KEY, 1 CNT
  FROM FACT_PAGE_VIEW A
 WHERE A.APPLICATION_KEY = 50 /*微信*/
   AND A.VISIT_DATE >= TO_DATE(&IN_POSTING_DATE, 'YYYYMMDD') - 65 /*统计最近65天的访问记录*/
   AND A.MEMBER_KEY <> 0;

SELECT G.MEMBER_KEY,
       H.M_LABEL_ID,
       H.M_LABEL_TYPE_ID,
       SYSDATE CREATE_DATE,
       'yangjin' CREATE_USER_ID,
       SYSDATE LAST_UPDATE_DATE,
       'yangjin' LAST_UPDATE_USER_ID
  FROM (SELECT F.MEMBER_KEY,
               F.CREATE_DATE_KEY,
               F.MAX_VISIT_DATE_KEY,
               F.LESS_30_DAYS_ACTIVE,
               F.MORE_30_DAYS_ACTIVE,
               CASE
                 WHEN F.CREATE_DATE_KEY >= &IN_30_DAYS_DATE_KEY THEN
                  'WX_REGISTERED_LESS_ONE_MONTH'
                 WHEN F.CREATE_DATE_KEY < &IN_30_DAYS_DATE_KEY AND
                      F.LESS_30_DAYS_ACTIVE >= 15 THEN
                  'WX_EVERYDAY_SEE'
                 WHEN F.CREATE_DATE_KEY < &IN_30_DAYS_DATE_KEY AND
                      F.LESS_30_DAYS_ACTIVE >= 4 THEN
                  'WX_OCCASIONALLY_SEE'
                 WHEN F.CREATE_DATE_KEY < &IN_30_DAYS_DATE_KEY AND
                      F.LESS_30_DAYS_ACTIVE > 0 THEN
                  'WX_ACTIVE'
                 WHEN F.CREATE_DATE_KEY < &IN_30_DAYS_DATE_KEY AND
                      F.MORE_30_DAYS_ACTIVE > 0 THEN
                  'WX_MAYBE_LOSS'
                 ELSE
                  'WX_DEEP_LOSS'
               END MEMBER_LABEL_NAME
          FROM (SELECT C.MEMBER_KEY,
                       D.CREATE_DATE_KEY,
                       C.MAX_VISIT_DATE_KEY,
                       C.LESS_30_DAYS_ACTIVE,
                       C.MORE_30_DAYS_ACTIVE
                  FROM (SELECT B.MEMBER_KEY,
                               MAX(B.VISIT_DATE_KEY) MAX_VISIT_DATE_KEY,
                               SUM(CASE
                                     WHEN B.VISIT_DATE_KEY >= &IN_30_DAYS_DATE_KEY THEN
                                      1
                                     ELSE
                                      0
                                   END) LESS_30_DAYS_ACTIVE, /*近30天*/
                               SUM(CASE
                                     WHEN B.VISIT_DATE_KEY < &IN_30_DAYS_DATE_KEY AND
                                          B.VISIT_DATE_KEY >= &IN_60_DAYS_DATE_KEY THEN
                                      1
                                     ELSE
                                      0
                                   END) MORE_30_DAYS_ACTIVE /*30天到60天*/
                          FROM (SELECT DISTINCT A.VISIT_DATE_KEY,
                                                A.MEMBER_KEY,
                                                1 CNT
                                  FROM FACT_PAGE_VIEW A
                                 WHERE A.APPLICATION_KEY = 50 /*微信*/
                                   AND A.VISIT_DATE >=
                                       TO_DATE(&IN_POSTING_DATE, 'YYYYMMDD') - 65 /*统计最近65天的访问记录*/
                                   AND A.MEMBER_KEY <> 0) B
                         GROUP BY B.MEMBER_KEY) C,
                       (SELECT E.MEMBER_BP MEMBER_KEY,
                               MAX(E.CREATE_DATE_KEY) CREATE_DATE_KEY
                          FROM DIM_MEMBER E
                         GROUP BY E.MEMBER_BP) D
                 WHERE C.MEMBER_KEY = D.MEMBER_KEY) F) G,
       MEMBER_LABEL_HEAD H
 WHERE G.MEMBER_LABEL_NAME = H.M_LABEL_NAME
   AND H.M_LABEL_ID BETWEEN 229 AND 234;

SELECT *
  FROM ALL_SOURCE A
 WHERE UPPER(A.TEXT) LIKE '%UPDATE%FACT_PAGE_VIEW%'
   AND EXISTS (SELECT 1
          FROM ALL_SOURCE B
         WHERE A.OWNER = B.OWNER
           AND A.name = B.name
           AND A.TYPE = B.TYPE
           AND UPPER(B.TEXT) LIKE '%DEVICE_KEY%');

PROCESSPAGERELATION;

SELECT *
  FROM ODSHAPPIGO.ODS_PAGEVIEW A
 WHERE A.ID >= 1240122363
   AND A.VID = 'wxoeNKjjgP8XUsqYIVYPYGiB_HgNss';
SELECT *
  FROM FACT_PAGE_VIEW A
 WHERE A.VID = 'wxoeNKjjgP8XUsqYIVYPYGiB_HgNss'
   AND A.VISIT_DATE >= DATE '2018-07-30';

SELECT *
  FROM ODSHAPPIGO.ODS_PAGEVIEW A
 WHERE A.CREATEON >= DATE '2018-07-30';

SELECT MAX(ID) FROM ODSHAPPIGO.ODS_PAGEVIEW A;

SELECT *
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY_IASPE IS NOT NULL;

SELECT * FROM OPER_EC_PRODUCT_SUMMARY_REPORT A;

SELECT A.ITEM_CODE,
       A.ERP_CODE,
       A.GOODS_NAME,
       A.BRAND_NAME,
       A.GOODS_STORAGE,
       A.ORDER_QTY,
       A.ORDER_AMOUNT
  FROM OPER_EC_PRODUCT_SUMMARY_REPORT A;

SELECT * FROM FACT_EC_ORDER_GOODS;

SELECT * FROM EC_ORDER_GOODS_TMP;

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME = 'MEMBER_LABEL_PKG.FIRST_ORDER_ITEM'
 ORDER BY A.START_TIME DESC;

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME = 'MEMBER_LABEL_PKG.WX_LOSS_SCORE'
 ORDER BY A.START_TIME DESC;

SELECT &S_MONTH_KEY MONTH_KEY, COUNT(DISTINCT(MEMBER_KEY)) ALL_MEMBER_COUNT
  FROM FACT_SESSION
 WHERE START_DATE_KEY BETWEEN &S_AGO_2_MONTH_FIRST_DAY_KEY AND
       &S_LAST_MONTH_LAST_DAY_KEY;

SELECT &S_MONTH_KEY MONTH_KEY, COUNT(DISTINCT(MEMBER_KEY)) ALL_MEMBER_COUNT
  FROM FACT_PAGE_VIEW
 WHERE VISIT_DATE BETWEEN TO_DATE(&S_AGO_2_MONTH_FIRST_DAY_KEY, 'YYYYMMDD') AND
       TO_DATE(&S_LAST_MONTH_LAST_DAY_KEY, 'YYYYMMDD');

select * from FACT_PAGE_VIEW t;

SELECT * FROM ALL_TAB_COMMENTS A WHERE A.COMMENTS LIKE '%活跃%';

SELECT * FROM OPER_ACTIVE_MEMBER_REPORT;

SELECT *
  FROM ALL_SOURCE A
 WHERE UPPER(A.TEXT) LIKE '%OPER_ACTIVE_MEMBER_REPORT%';

SELECT DATE '2018-07-26' - DATE '2018-06-14', DATE '2018-07-26' + 42
  FROM DUAL;

SELECT C.ITEM_CODE,
       C.ASPECT_CATEGORY,
       C.EVA_COUNT,
       C.EVA_POSITIVE_COUNT,
       C.EVA_NEGATIVE_COUNT,
       CASE
         WHEN C.EVA_POSITIVE_PER < 0.7 THEN
          'LOW'
         WHEN C.EVA_POSITIVE_PER >= 0.7 AND C.EVA_POSITIVE_PER < 0.9 THEN
          'MEDIUM'
         WHEN C.EVA_POSITIVE_PER >= 0.7 THEN
          'HIGH'
       END EVA_LEVEL
  FROM (SELECT B.ITEM_CODE,
               B.ASPECT_CATEGORY,
               COUNT(1) EVA_COUNT,
               SUM(B.COL1) EVA_POSITIVE_COUNT,
               SUM(B.COL2) EVA_NEGATIVE_COUNT,
               ROUND(SUM(B.COL1) / COUNT(1), 2) EVA_POSITIVE_PER
          FROM (SELECT B1.ITEM_CODE,
                       A1.ASPECT_CATEGORY,
                       A1.ASPECT_POLARITY,
                       CASE
                         WHEN A1.ASPECT_POLARITY = '正' THEN
                          1
                         ELSE
                          0
                       END COL1,
                       CASE
                         WHEN A1.ASPECT_POLARITY = '负' THEN
                          1
                         ELSE
                          0
                       END COL2
                  FROM FACT_GOODS_EVALUATE_ASPECT A1, DIM_EC_GOOD B1
                 WHERE A1.GEVAL_GOODS_COMMONID = B1.GOODS_COMMONID) B
         GROUP BY B.ITEM_CODE, B.ASPECT_CATEGORY) C
 ORDER BY C.EVA_COUNT DESC;

SELECT DISTINCT A.GEVAL_GOODS_COMMONID FROM FACT_GOODS_EVALUATE_ASPECT A;

SELECT * FROM GOODS_LABEL_LINK A WHERE A.CREATE_USER_ID = 'happigo_ec';

SELECT A.LV1_NAME,
       A.LV1_DESC,
       A.LV2_NAME,
       A.LV2_DESC,
       A.LV3_NAME,
       A.LV3_DESC,
       B.ITEM_CODE,
       C.GOODS_NAME
  FROM GOODS_LABEL_HEAD_LEVEL_V A, GOODS_LABEL_LINK B, DIM_EC_GOOD C
 WHERE A.LV3_ID = B.G_LABEL_ID
   AND B.ITEM_CODE = C.ITEM_CODE
   AND A.LV1_ID = 1080
 ORDER BY A.LV1_NAME,
          A.LV1_DESC,
          A.LV2_NAME,
          A.LV2_DESC,
          A.LV3_NAME,
          A.LV3_DESC,
          B.ITEM_CODE,
          C.GOODS_NAME;

SELECT *
  FROM FACT_GOODS_EVALUATE A
 WHERE A.GEVAL_SENTIMENT_POLARITY_IASPE NOT LIKE '%}]';

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME = 'HAPPIGO_EC_PKG.MERGE_FACT_GOODS_EVALUATE'
 ORDER BY A.START_TIME DESC;

SELECT * FROM S_PARAMETERS2 A WHERE A.DEVELOPER = 'yangjin';

/*未产生首单的用户*/
SELECT P.*
  FROM (SELECT A.MEMBER_KEY,
               TO_CHAR(TRUNC(MIN(A.CREATE_DATE)), 'YYYYMMDD') CREATE_DATE
          FROM MEMBER_LABEL_LINK A
         WHERE A.M_LABEL_ID = 42
         GROUP BY A.MEMBER_KEY) P
 WHERE EXISTS (SELECT /*+INDEX(B GS_POSTING_KEY)*/
         1
          FROM FACT_GOODS_SALES B
         WHERE B.ORDER_STATE = 1
              /*订购日期大于未产生首单标签的日期*/
           AND B.POSTING_DATE_KEY >= CREATE_DATE
           AND P.MEMBER_KEY = B.MEMBER_KEY);

/*当天注册的会员BP号,没有首单标签*/
SELECT P.*
  FROM (SELECT A.MEMBER_KEY
          FROM FACT_VISITOR_REGISTER A
         WHERE A.MEMBER_KEY <> 0
           AND A.CREATE_DATE_KEY = &IN_POSTING_DATE_KEY
         GROUP BY A.MEMBER_KEY) P
 WHERE NOT EXISTS
 (SELECT 1
          FROM MEMBER_LABEL_LINK B
         WHERE B.M_LABEL_ID IN (42, 43, 44, 45, 46, 47, 48, 181, 182)
           AND P.MEMBER_KEY = B.MEMBER_KEY);

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME LIKE '%OPER_EC_PRODUCT%'
 ORDER BY A.START_TIME DESC;

SELECT *
  FROM W_ETL_LOG A
 WHERE A.PROC_NAME = 'YJ_REPORT.OPER_EC_PRODUCT_SUMMARY_PROC'
 ORDER BY A.START_TIME DESC;

select userenv('language') from dual;

select * from V$NLS_PARAMETERS;
